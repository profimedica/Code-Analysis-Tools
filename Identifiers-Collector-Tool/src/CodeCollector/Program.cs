using CodeMarkerExplorer;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CodeCollector
{
    class Program
    {
        enum IdentifyLevel { Namespace, Class, Structure, Method }
        static XNamespace currentNamespace = null;
        static XClass currentClass = null;
        static XRef currentFile = null;

        /// <summary>
        /// The input file containing the markers generated by CodeMarker tool
        /// </summary>
        private static string InputFile { get; set; }

        /// <summary>
        /// The output file to store the identifiers (result)
        /// </summary>
        private static string OutputFile { get; set; }

        /// <summary>
        /// 
        /// </summary>
        private static List<XNamespace> AllNamespaces = new List<XNamespace>();
        private static List<XClass> classes = new List<XClass>();
        private static List<MarkedFile> AllMarkedFiles = new List<MarkedFile>();

        /// <param name="args"></param>
        static void Main(string[] args)
        {
            LoadMarkers();
            AnalizeElements();
            WriteOutput();
        }

        private static void WriteOutput()
        {
            StringBuilder sb = new StringBuilder();
            foreach(XNamespace n in AllNamespaces)
            {
                sb.AppendLine("N " + n.Name);
                foreach(XClass c in n.Classes)
                {
                    sb.AppendLine("\tC " + c.Name);
                    foreach(XRef r in c.Files)
                    {
                        sb.AppendLine("\t\tF " + r.File + " " + r.From + ":" + r.BlockBegin + ":" + r.To);
                        foreach(XMethod m in r.Methods)
                        {
                            sb.AppendLine("\t\t\tM " + m.Name + " " + r.From + ":" + r.BlockBegin + ":" + r.To);
                        }
                    }
                }
            }
            File.WriteAllText("C:\\Logs\\Identifiers.txt", sb.ToString());
        }

        private static void AnalizeElements()
        {
            AllNamespaces = new List<XNamespace>();
            foreach (MarkedFile markedFile in AllMarkedFiles)
            {
                string content = File.ReadAllText(markedFile.Path);
                currentNamespace = null;
                if(markedFile.RootMarker != null)
                foreach (Marker m in markedFile.RootMarker.Markers)
                {
                    CollectData(m, new FileInfo(markedFile.Path), content);
                }
            }
        }


        private static void CollectData(Marker marker, FileInfo fileInfo, string content)
        {
            if (marker != null)
            {
                if (marker.BlockAt > 0)
                {
                    string sighature = content.Substring(marker.From, marker.BlockAt - marker.From - 1).Trim();
                    if (sighature.IndexOf('(') > 0)
                    {
                        sighature = sighature.Substring(0, sighature.IndexOf('('));
                    }
                    string[] signatureElements = sighature.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                    if (signatureElements[0].Equals("namespace"))
                    {
                        currentClass = null;
                        currentNamespace = AllNamespaces.Where(p => p.Name.Equals(signatureElements[1])).FirstOrDefault();
                        if (currentNamespace == null)
                        {
                            currentNamespace = new XNamespace(signatureElements[1]);
                            currentNamespace.Classes = new List<XClass>();
                            AllNamespaces.Add(currentNamespace);
                        }
                        foreach (Marker child in marker.Markers)
                        {
                            CollectData(child, fileInfo, content);
                        }
                    }
                    else
                    if (signatureElements.Contains("class") || signatureElements.Contains("struct"))
                    {
                        int posCls = Array.IndexOf(signatureElements, "class");
                        int posStr = Array.IndexOf(signatureElements, "class");
                        string className = signatureElements[1 + (posCls > posStr? posCls : posStr)];
                        currentClass = classes.Where(p => p.Name.Equals(className)).FirstOrDefault();
                        if (currentClass == null)
                        {
                            currentClass = new XClass(className);
                            currentFile = new XRef(fileInfo, marker.From, marker.BlockAt, marker.To);
                            currentClass.Files.Add(currentFile);
                            if (currentNamespace != null)
                            {
                                currentClass.Namespace = currentNamespace;
                                if (currentNamespace.Classes.Count(p=>p.Name.Equals(currentClass.Name))<1)
                                {
                                    currentNamespace.Classes.Add(currentClass);
                                }
                            }
                        }
                        foreach (Marker child in marker.Markers)
                        {
                            CollectData(child, fileInfo, content);
                        }
                    }
                    else if(!signatureElements.Contains("enum"))
                    {
                        if (signatureElements.Length > 1 && currentClass != null)
                        {
                            XMethod m = new XMethod(signatureElements[signatureElements.Length - 1]);
                            m.From = marker.From;
                            m.BlockBegin = marker.BlockAt;
                            m.To = marker.To;
                            currentFile.Methods.Add(m);
                        }
                    }
                }
            }
        }

        private static void LoadMarkers()
        {
            string[] lines = File.ReadAllLines("C:\\Logs\\Markers.txt");
            AllMarkedFiles.Clear();
            foreach (string line in lines)
            {
                MarkedFile markedFile = new MarkedFile(line);
                AllMarkedFiles.Add(markedFile);
            }
        }
    }
}
